-- Script full - All features (Vietnamese, no key system)
-- Paste into executor or LocalScript. Requires writefile/readfile for persistent save (fallback to getgenv).

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Settings file
local SETTINGS_FILE = "custom_menu_settings_final_v2.json"

-- Default settings
local defaultSettings = {
    infJump = false,
    noclip = false,
    walkspeedEnabled = false,
    walkspeedValue = 16,
    hitboxAll = false,
    hitboxEnemy = false,
    hitboxSize = 7,
    espAll = false,
    espEnemy = false,
    playerListVisible = false
}

-- Safe file helpers
local function canFile()
    return type(writefile) == "function" and type(readfile) == "function" and type(isfile) == "function"
end
local function safeRead(name)
    if canFile() then
        local ok, content = pcall(readfile, name)
        if ok then return content end
        return nil
    else
        return getgenv().__custom_menu_data
    end
end
local function safeWrite(name, content)
    if canFile() then
        pcall(writefile, name, content)
    else
        getgenv().__custom_menu_data = content
    end
end

-- Load settings
local settings = {}
do
    local raw = safeRead(SETTINGS_FILE)
    if raw then
        local ok, dec = pcall(function() return HttpService:JSONDecode(raw) end)
        if ok and type(dec) == "table" then settings = dec else settings = defaultSettings end
    else
        settings = defaultSettings
    end
    for k,v in pairs(defaultSettings) do if settings[k] == nil then settings[k] = v end end
    pcall(function() safeWrite(SETTINGS_FILE, HttpService:JSONEncode(settings)) end)
end
local function saveSettings() local ok, enc = pcall(function() return HttpService:JSONEncode(settings) end) if ok and enc then pcall(safeWrite, SETTINGS_FILE, enc) end end
local function setAndSave(k,v) settings[k] = v; saveSettings() end

-- Helpers
local function isEnemy(plr)
    if not plr then return true end
    if player.Team and plr.Team then return player.Team ~= plr.Team end
    return true
end
local function getRootPart(char)
    if not char then return nil end
    return char:FindFirstChild("HumanoidRootPart")
        or char:FindFirstChild("Torso")
        or char:FindFirstChild("UpperTorso")
        or char:FindFirstChild("LowerTorso")
end

-- Keep original HRP props to restore
local originalHRP = {}

local function saveOriginal(plr)
    if not plr or not plr.Character then return end
    local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
    if hrp and not originalHRP[plr.UserId] then
        originalHRP[plr.UserId] = {
            Size = hrp.Size,
            Transparency = hrp.Transparency,
            Material = hrp.Material,
            Color = hrp.Color or Color3.fromRGB(163,162,165),
            CanCollide = hrp.CanCollide
        }
    end
end
local function restoreOriginal(plr)
    if not plr or not plr.Character then return end
    local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local orig = originalHRP[plr.UserId]
    if orig then
        pcall(function()
            hrp.Size = orig.Size
            hrp.Transparency = orig.Transparency or 0
            hrp.Material = orig.Material or Enum.Material.Plastic
            hrp.Color = orig.Color or Color3.fromRGB(163,162,165)
            hrp.CanCollide = (orig.CanCollide ~= nil) and orig.CanCollide or false
        end)
        originalHRP[plr.UserId] = nil
    else
        pcall(function()
            hrp.Size = Vector3.new(2,2,1)
            hrp.Transparency = 0
            hrp.Material = Enum.Material.Plastic
            hrp.Color = Color3.fromRGB(163,162,165)
            hrp.CanCollide = false
        end)
    end
end
local function applyHitboxTo(plr, size)
    if not plr or not plr.Character then return end
    local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    saveOriginal(plr)
    pcall(function()
        hrp.Size = Vector3.new(size, size, size)
        hrp.Transparency = 0.65
        hrp.Material = Enum.Material.SmoothPlastic
        hrp.Color = Color3.fromRGB(0,255,0)
        hrp.CanCollide = false
    end)
end

-- ESP helpers
local function addHighlight(plr, color)
    if not plr or not plr.Character then return end
    local name = "ESP_Highlight_vFINAL"
    local hl = plr.Character:FindFirstChild(name)
    if not hl then
        hl = Instance.new("Highlight")
        hl.Name = name
        hl.FillTransparency = 1
        hl.OutlineTransparency = 0
        hl.Parent = plr.Character
    end
    pcall(function() hl.OutlineColor = color end)
end
local function removeHighlight(plr)
    if not plr or not plr.Character then return end
    local name = "ESP_Highlight_vFINAL"
    local hl = plr.Character:FindFirstChild(name)
    if hl then pcall(function() hl:Destroy() end) end
end

-- ================= Create Main GUI directly =================
local MainGui = nil
local function createMainGui()
    if MainGui then return end
    -- (giữ nguyên toàn bộ phần MainGui từ script cũ, không đổi gì)
end

-- Gọi MainGui luôn
createMainGui()

-- Cleanup khi player rời
Players.PlayerRemoving:Connect(function(pl)
    if originalHRP[pl.UserId] then originalHRP[pl.UserId] = nil end
    removeHighlight(pl)
end)

print("[CustomMenu] Ready. Menu loaded without key system.")
