-- SCRIPT FULL MỚI NHẤT (Key-gated, persistent, fixes applied)
-- Paste vào executor hoặc LocalScript (PlayerGui). Requires writefile/readfile for persistence (fallback to getgenv).

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Config
local VALID_KEYS = { abcd = true, abcdf = true, bpremium = true }
local SETTINGS_FILE = "custom_menu_settings_v2.json"

-- Default settings
local defaultSettings = {
    infJump = false,
    noclip = false,
    walkspeedEnabled = false,
    walkspeedValue = 16,
    hitboxAll = false,
    hitboxEnemy = false,
    hitboxSize = 7,
    espAll = false,
    espEnemy = false,
    playerListVisible = false
}

-- Persistence helpers (writefile/readfile or fallback)
local function canUseFileApis()
    return type(writefile) == "function" and type(readfile) == "function" and type(isfile) == "function"
end

local function safeRead(name)
    if canUseFileApis() then
        local ok, content = pcall(readfile, name)
        if ok then return content end
        return nil
    else
        return getgenv().__menu_settings_data
    end
end

local function safeWrite(name, content)
    if canUseFileApis() then
        pcall(writefile, name, content)
    else
        getgenv().__menu_settings_data = content
    end
end

-- Load settings
local settings = {}
do
    local raw = safeRead(SETTINGS_FILE)
    if raw then
        local ok, dec = pcall(function() return HttpService:JSONDecode(raw) end)
        if ok and type(dec) == "table" then
            settings = dec
        else
            settings = defaultSettings
        end
    else
        settings = defaultSettings
    end
    -- ensure all keys present
    for k, v in pairs(defaultSettings) do
        if settings[k] == nil then settings[k] = v end
    end
    -- ensure file exists
    pcall(function() safeWrite(SETTINGS_FILE, HttpService:JSONEncode(settings)) end)
end

local function saveSettings()
    local ok, enc = pcall(function() return HttpService:JSONEncode(settings) end)
    if ok and enc then pcall(safeWrite, SETTINGS_FILE, enc) end
end
local function setAndSave(k, v) settings[k] = v; saveSettings() end

-- Runtime state (initialized when main UI created)
local state = {
    infJump = false,
    noclip = false,
    walkspeedEnabled = false,
    walkspeedValue = 16,
    hitboxAll = false,
    hitboxEnemy = false,
    hitboxSize = 7,
    espAll = false,
    espEnemy = false,
    playerListVisible = false
}

-- helpers
local function isEnemy(plr)
    if not plr then return true end
    if player.Team and plr.Team then return player.Team ~= plr.Team end
    return true
end

-- Keep original HRP props to restore when disabling hitbox
local originalHRPProps = {} -- originalHRPProps[userId] = {Size,Transparency,Material,Color,CanCollide}
local function saveOriginalHRP(plr)
    if not plr or not plr.Character then return end
    local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
    if hrp and not originalHRPProps[plr.UserId] then
        originalHRPProps[plr.UserId] = {
            Size = hrp.Size,
            Transparency = hrp.Transparency,
            Material = hrp.Material,
            Color = (hrp.Color or Color3.fromRGB(163,162,165)),
            CanCollide = hrp.CanCollide
        }
    end
end
local function restoreOriginalHRP(plr)
    if not plr or not plr.Character then return end
    local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local orig = originalHRPProps[plr.UserId]
    if orig then
        pcall(function()
            hrp.Size = orig.Size
            hrp.Transparency = orig.Transparency or 0
            hrp.Material = orig.Material or Enum.Material.Plastic
            hrp.Color = orig.Color or Color3.fromRGB(163,162,165)
            hrp.CanCollide = (orig.CanCollide ~= nil) and orig.CanCollide or true
        end)
        originalHRPProps[plr.UserId] = nil
    else
        -- fallback reset
        pcall(function()
            hrp.Size = Vector3.new(2,2,1)
            hrp.Transparency = 0
            hrp.Material = Enum.Material.Plastic
            hrp.Color = Color3.fromRGB(163,162,165)
            hrp.CanCollide = true
        end)
    end
end

local function applyHitboxToPlayer(plr, size)
    if not plr or not plr.Character then return end
    local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    saveOriginalHRP(plr)
    pcall(function()
        hrp.Size = Vector3.new(size, size, size)
        hrp.Transparency = 0.65
        hrp.Material = Enum.Material.SmoothPlastic
        hrp.Color = Color3.fromRGB(0, 255, 0)
        hrp.CanCollide = false
    end)
end

-- ESP highlight helpers (separate from hitbox)
local function addESPHighlight(plr, color)
    if not plr or not plr.Character then return end
    local name = "ESP_Highlight_v2"
    local hl = plr.Character:FindFirstChild(name)
    if not hl then
        hl = Instance.new("Highlight")
        hl.Name = name
        hl.FillTransparency = 1
        hl.OutlineTransparency = 0
        hl.Parent = plr.Character
    end
    pcall(function() hl.OutlineColor = color end)
end
local function removeESPHighlight(plr)
    if not plr or not plr.Character then return end
    local name = "ESP_Highlight_v2"
    local hl = plr.Character:FindFirstChild(name)
    if hl then pcall(function() hl:Destroy() end) end
end

-- MAIN UI / Key UI creation
-- Create Key UI first (only UI present until key validated)
local keyGui = Instance.new("ScreenGui")
keyGui.Name = "CustomMenu_Key"
keyGui.ResetOnSpawn = false
keyGui.Parent = playerGui

local keyFrame = Instance.new("Frame", keyGui)
keyFrame.Size = UDim2.new(0, 360, 0, 180)
keyFrame.Position = UDim2.new(0.5, -180, 0.5, -90)
keyFrame.BackgroundColor3 = Color3.fromRGB(40,40,40)
keyFrame.BorderSizePixel = 0

local titleLabel = Instance.new("TextLabel", keyFrame)
titleLabel.Size = UDim2.new(1, -20, 0, 28)
titleLabel.Position = UDim2.new(0, 10, 0, 8)
titleLabel.Text = "Nhập Key"
titleLabel.TextScaled = true
titleLabel.BackgroundTransparency = 1
titleLabel.TextColor3 = Color3.fromRGB(255,255,255)

local keyBox = Instance.new("TextBox", keyFrame)
keyBox.Size = UDim2.new(0, 260, 0, 36)
keyBox.Position = UDim2.new(0.5, -130, 0, 48)
keyBox.PlaceholderText = "Nhập key..."
keyBox.ClearTextOnFocus = false

local keyBtn = Instance.new("TextButton", keyFrame)
keyBtn.Size = UDim2.new(0, 120, 0, 36)
keyBtn.Position = UDim2.new(0.5, -60, 0, 100)
keyBtn.Text = "Xác nhận"
keyBtn.BackgroundColor3 = Color3.fromRGB(70,70,70)
keyBtn.BorderSizePixel = 0

local keyToggleBtn = Instance.new("TextButton", keyGui)
keyToggleBtn.Size = UDim2.new(0, 110, 0, 36)
keyToggleBtn.Position = UDim2.new(0, 10, 0, 10)
keyToggleBtn.Text = "Key Menu"
keyToggleBtn.BackgroundColor3 = Color3.fromRGB(60,60,60)
keyToggleBtn.BorderSizePixel = 0
keyToggleBtn.MouseButton1Click:Connect(function() keyFrame.Visible = not keyFrame.Visible end)

-- Main UI variable (created only after correct key)
local mainGui = nil

-- Utility: find a suitable root part for TP
local function getRootPart(char)
    if not char then return nil end
    return char:FindFirstChild("HumanoidRootPart")
        or char:FindFirstChild("Torso")
        or char:FindFirstChild("UpperTorso")
        or char:FindFirstChild("LowerTorso")
end

-- Create Main UI and wire features (called once after key valid)
local function createMainUI()
    if mainGui then return end

    -- initialize runtime state from saved settings
    state.infJump = settings.infJump
    state.noclip = settings.noclip
    state.walkspeedEnabled = settings.walkspeedEnabled
    state.walkspeedValue = settings.walkspeedValue or 16
    state.hitboxAll = settings.hitboxAll
    state.hitboxEnemy = settings.hitboxEnemy
    state.hitboxSize = settings.hitboxSize or 7
    state.espAll = settings.espAll
    state.espEnemy = settings.espEnemy
    state.playerListVisible = settings.playerListVisible

    mainGui = Instance.new("ScreenGui")
    mainGui.Name = "CustomMenu_Main"
    mainGui.ResetOnSpawn = false
    mainGui.Parent = playerGui

    -- main toggle button (top-right)
    local mainToggle = Instance.new("TextButton", mainGui)
    mainToggle.Size = UDim2.new(0, 110, 0, 36)
    mainToggle.Position = UDim2.new(1, -130, 0, 10)
    mainToggle.Text = "Main"
    mainToggle.BackgroundColor3 = Color3.fromRGB(60,60,60)
    mainToggle.BorderSizePixel = 0

    local mainFrame = Instance.new("Frame", mainGui)
    mainFrame.Size = UDim2.new(0, 540, 0, 420)
    mainFrame.Position = UDim2.new(0.5, -270, 0.5, -210)
    mainFrame.BackgroundColor3 = Color3.fromRGB(45,45,45)
    mainFrame.BorderSizePixel = 0
    mainFrame.Visible = true

    mainToggle.MouseButton1Click:Connect(function() mainFrame.Visible = not mainFrame.Visible end)

    -- tab bar
    local tabBar = Instance.new("Frame", mainFrame)
    tabBar.Size = UDim2.new(1, 0, 0, 44)
    tabBar.Position = UDim2.new(0, 0, 0, 0)
    tabBar.BackgroundColor3 = Color3.fromRGB(35,35,35)

    local pages = {}
    local function makeTab(name, index)
        local btn = Instance.new("TextButton", tabBar)
        btn.Size = UDim2.new(0, 180, 1, 0)
        btn.Position = UDim2.new(0, (index-1)*180, 0, 0)
        btn.Text = name
        btn.BackgroundColor3 = Color3.fromRGB(55,55,55)
        btn.BorderSizePixel = 0

        local page = Instance.new("Frame", mainFrame)
        page.Size = UDim2.new(1, 0, 1, -44)
        page.Position = UDim2.new(0, 0, 0, 44)
        page.BackgroundColor3 = Color3.fromRGB(60,60,60)
        page.Visible = false

        btn.MouseButton1Click:Connect(function()
            for _, v in pairs(pages) do v.Visible = false end
            page.Visible = true
        end)

        pages[name] = page
        return page
    end

    local playerPage = makeTab("Player", 1)
    local espPage = makeTab("ESP", 2)
    local scriptPage = makeTab("Script", 3)

    -- helper to create button
    local function mkBtn(parent, text, y)
        local b = Instance.new("TextButton", parent)
        b.Size = UDim2.new(0, 220, 0, 36)
        b.Position = UDim2.new(0, 12, 0, y)
        b.Text = text
        b.BackgroundColor3 = Color3.fromRGB(70,70,70)
        b.BorderSizePixel = 0
        return b
    end

    -- ========== Player Tab ==========
    local infBtn = mkBtn(playerPage, "InfJump: OFF", 8)
    local noclipBtn = mkBtn(playerPage, "NoClip: OFF", 56)
    local wsBtn = mkBtn(playerPage, "WalkSpeed: OFF", 104)

    local wsInput = Instance.new("TextBox", playerPage)
    wsInput.Size = UDim2.new(0, 220, 0, 30)
    wsInput.Position = UDim2.new(0, 12, 0, 152)
    wsInput.PlaceholderText = "Nhập tốc độ..."
    wsInput.Text = tostring(state.walkspeedValue)

    local playerListBtn = mkBtn(playerPage, "Bảng Player: OFF", 200)
    local playerListFrame = Instance.new("Frame", playerPage)
    playerListFrame.Size = UDim2.new(0, 260, 0, 320)
    playerListFrame.Position = UDim2.new(0, 240, 0, 8)
    playerListFrame.BackgroundColor3 = Color3.fromRGB(50,50,50)
    playerListFrame.BorderSizePixel = 0
    playerListFrame.Visible = state.playerListVisible

    local playerListLayout = Instance.new("UIListLayout", playerListFrame)
    playerListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    playerListLayout.Padding = UDim.new(0, 6)

    -- Player tab actions
    infBtn.MouseButton1Click:Connect(function()
        state.infJump = not state.infJump
        infBtn.Text = state.infJump and "InfJump: ON" or "InfJump: OFF"
        setAndSave("infJump", state.infJump)
    end)

    noclipBtn.MouseButton1Click:Connect(function()
        state.noclip = not state.noclip
        noclipBtn.Text = state.noclip and "NoClip: ON" or "NoClip: OFF"
        setAndSave("noclip", state.noclip)
    end)

    wsBtn.MouseButton1Click:Connect(function()
        state.walkspeedEnabled = not state.walkspeedEnabled
        wsBtn.Text = state.walkspeedEnabled and "WalkSpeed: ON" or "WalkSpeed: OFF"
        state.walkspeedValue = tonumber(wsInput.Text) or state.walkspeedValue
        setAndSave("walkspeedEnabled", state.walkspeedEnabled)
        setAndSave("walkspeedValue", state.walkspeedValue)
    end)

    wsInput.FocusLost:Connect(function(enter)
        local v = tonumber(wsInput.Text)
        if v then
            state.walkspeedValue = v
            setAndSave("walkspeedValue", state.walkspeedValue)
            if state.walkspeedEnabled and player.Character then
                local h = player.Character:FindFirstChildOfClass("Humanoid")
                if h then pcall(function() h.WalkSpeed = state.walkspeedValue end) end
            end
        else
            wsInput.Text = tostring(state.walkspeedValue)
        end
    end)

    playerListBtn.MouseButton1Click:Connect(function()
        playerListFrame.Visible = not playerListFrame.Visible
        playerListBtn.Text = "Bảng Player: " .. (playerListFrame.Visible and "ON" or "OFF")
        setAndSave("playerListVisible", playerListFrame.Visible)
    end)

    local function clearPlayerButtons()
        for _, c in pairs(playerListFrame:GetChildren()) do
            if c:IsA("TextButton") then c:Destroy() end
        end
    end

    local function createPlayerButton(target)
        if not target or target == player then return end
        local btn = Instance.new("TextButton", playerListFrame)
        btn.Size = UDim2.new(1, -12, 0, 28)
        btn.BackgroundColor3 = Color3.fromRGB(70,70,70)
        btn.BorderSizePixel = 0
        btn.Text = target.Name
        btn.LayoutOrder = #playerListFrame:GetChildren() + 1
        btn.MouseButton1Click:Connect(function()
            -- TP safe: find root part, spam a few times
            local function getRoot(c) return getRootPart(c) end
            if player.Character and getRoot(player.Character) and target.Character and getRoot(target.Character) then
                local myRoot = getRoot(player.Character)
                local targetRoot = getRoot(target.Character)
                for i = 1, 6 do
                    task.spawn(function()
                        pcall(function()
                            myRoot.CFrame = targetRoot.CFrame + Vector3.new(0, 7, 0)
                        end)
                    end)
                    task.wait(0.04)
                end
            end
        end)
    end

    local function updatePlayerList()
        clearPlayerButtons()
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= player then createPlayerButton(plr) end
        end
    end

    RunService.RenderStepped:Connect(function()
        if playerListFrame and playerListFrame.Visible then
            pcall(updatePlayerList)
        end
    end)
    Players.PlayerAdded:Connect(function(pl)
        if playerListFrame.Visible then task.wait(0.2); pcall(updatePlayerList) end
        pl.CharacterAdded:Connect(function() task.wait(0.4); if playerListFrame.Visible then pcall(updatePlayerList) end end)
    end)
    Players.PlayerRemoving:Connect(function() if playerListFrame.Visible then task.wait(0.1); pcall(updatePlayerList) end end)

    -- ========== ESP Tab ==========
    local hbSizeInput = Instance.new("TextBox", espPage)
    hbSizeInput.Size = UDim2.new(0, 140, 0, 36)
    hbSizeInput.Position = UDim2.new(0, 12, 0, 8)
    hbSizeInput.PlaceholderText = "Hitbox size"
    hbSizeInput.Text = tostring(state.hitboxSize)

    local function mkESPBtn(text, y, cb)
        local b = Instance.new("TextButton", espPage)
        b.Size = UDim2.new(0, 220, 0, 36)
        b.Position = UDim2.new(0, 12, 0, y)
        b.Text = text .. ": OFF"
        b.BackgroundColor3 = Color3.fromRGB(70,70,70)
        b.BorderSizePixel = 0
        local st = false
        b.MouseButton1Click:Connect(function()
            st = not st
            b.Text = text .. ": " .. (st and "ON" or "OFF")
            cb(st)
        end)
        return b
    end

    local hbAllBtn = mkESPBtn("Hitbox All", 60, function(s) state.hitboxAll = s setAndSave("hitboxAll", s) end)
    local hbEnemyBtn = mkESPBtn("Hitbox Enemy", 110, function(s) state.hitboxEnemy = s setAndSave("hitboxEnemy", s) end)
    local espAllBtn = mkESPBtn("ESP All", 160, function(s) state.espAll = s setAndSave("espAll", s) end)
    local espEnemyBtn = mkESPBtn("ESP Enemy", 210, function(s) state.espEnemy = s setAndSave("espEnemy", s) end)

    hbSizeInput.FocusLost:Connect(function()
        local n = tonumber(hbSizeInput.Text)
        if n then state.hitboxSize = n setAndSave("hitboxSize", n) else hbSizeInput.Text = tostring(state.hitboxSize) end
    end)

    -- Ensure original HRP props cleared when player leaves
    Players.PlayerRemoving:Connect(function(plr) if originalHRPProps[plr.UserId] then originalHRPProps[plr.UserId] = nil end end)

    -- Updater for Hitbox (separate) and ESP (separate)
    task.spawn(function()
        while mainGui and mainGui.Parent do
            local size = tonumber(hbSizeInput.Text) or state.hitboxSize or 7
            for _, plr in pairs(Players:GetPlayers()) do
                if plr ~= player and plr.Character and plr.Character.Parent then
                    -- Hitbox logic
                    local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        if state.hitboxAll then
                            applyHitboxToPlayer(plr, size)
                        elseif state.hitboxEnemy and isEnemy(plr) then
                            applyHitboxToPlayer(plr, size)
                        else
                            -- restore if no hitbox condition
                            restoreOriginalHRP(plr)
                        end
                    end
                    -- ESP logic (Highlight)
                    local shouldESP = false
                    if state.espAll then shouldESP = true
                    elseif state.espEnemy and isEnemy(plr) then shouldESP = true end

                    if shouldESP then
                        -- color: green for all, red for enemy when using espEnemy (we'll use red for enemy case)
                        if state.espAll then addESPHighlight(plr, Color3.fromRGB(0,255,0))
                        elseif state.espEnemy and isEnemy(plr) then addESPHighlight(plr, Color3.fromRGB(255,0,0)) end
                    else
                        removeESPHighlight(plr)
                    end
                end
            end
            task.wait(0.25)
        end
    end)

    -- ========== Script Tab ==========
    local function mkScriptBtn(parent, text, y, fn)
        local b = Instance.new("TextButton", parent)
        b.Size = UDim2.new(0, 240, 0, 36)
        b.Position = UDim2.new(0, 12, 0, y)
        b.Text = text
        b.BackgroundColor3 = Color3.fromRGB(70,70,70)
        b.BorderSizePixel = 0
        b.MouseButton1Click:Connect(function() pcall(fn) end)
        return b
    end

    mkScriptBtn(scriptPage, "Load FlyGuiV3", 10, function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
    end)
    mkScriptBtn(scriptPage, "DatTh Script", 60, function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/LuaCrack/DatThg/refs/heads/main/DatThgV2"))()
    end)
    mkScriptBtn(scriptPage, "Menu TP", 110, function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/doanhvu339-ux/Fly/refs/heads/main/scripttp"))()
    end)
    mkScriptBtn(scriptPage, "Float", 160, function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/doanhvu339-ux/Fly/refs/heads/main/Float"))()
    end)

    -- InfJump binding: re-bind on respawn to be safe
    local function bindInfJump()
        UserInputService.JumpRequest:Connect(function()
            if state.infJump and player.Character then
                local h = player.Character:FindFirstChildOfClass("Humanoid")
                if h then pcall(function() h:ChangeState(Enum.HumanoidStateType.Jumping) end) end
            end
        end)
    end
    bindInfJump()
    player.CharacterAdded:Connect(function()
        task.wait(0.5)
        bindInfJump()
        -- reapply WalkSpeed & NoClip states quickly when respawn
        if state.walkspeedEnabled and player.Character then
            local h = player.Character:FindFirstChildOfClass("Humanoid")
            if h then pcall(function() h.WalkSpeed = state.walkspeedValue end) end
        end
    end)

    -- NoClip and WalkSpeed runtime loops (only after main created)
    RunService.Stepped:Connect(function()
        if state.noclip and player.Character then
            for _, part in pairs(player.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    pcall(function() part.CanCollide = false end)
                end
            end
        end
    end)
    RunService.Heartbeat:Connect(function()
        if state.walkspeedEnabled and player.Character then
            local h = player.Character:FindFirstChildOfClass("Humanoid")
            if h then pcall(function() h.WalkSpeed = tonumber(wsInput.Text) or state.walkspeedValue end) end
        end
    end)

    -- Apply initial UI labels & values
    infBtn.Text = state.infJump and "InfJump: ON" or "InfJump: OFF"
    noclipBtn.Text = state.noclip and "NoClip: ON" or "NoClip: OFF"
    wsInput.Text = tostring(state.walkspeedValue)
    wsBtn.Text = state.walkspeedEnabled and "WalkSpeed: ON" or "WalkSpeed: OFF"
    playerListFrame.Visible = state.playerListVisible
    playerListBtn.Text = "Bảng Player: " .. (playerListFrame.Visible and "ON" or "OFF")
    hbSizeInput.Text = tostring(state.hitboxSize)
    hbAllBtn.Text = "Hitbox All: " .. (state.hitboxAll and "ON" or "OFF")
    hbEnemyBtn.Text = "Hitbox Enemy: " .. (state.hitboxEnemy and "ON" or "OFF")
    espAllBtn.Text = "ESP All: " .. (state.espAll and "ON" or "OFF")
    espEnemyBtn.Text = "ESP Enemy: " .. (state.espEnemy and "ON" or "OFF")

    -- show Player page default
    for _, v in pairs(pages) do v.Visible = false end
    pages["Player"].Visible = true
end

-- Key validation: only create main UI after valid key entered
keyBtn.MouseButton1Click:Connect(function()
    local entered = tostring(keyBox.Text or "")
    if VALID_KEYS[entered] then
        pcall(function() keyFrame:Destroy() end)
        pcall(function() keyToggleBtn:Destroy() end)
        createMainUI()
    else
        keyBox.Text = "Sai key!"
    end
end)

-- End
print("[CustomMenu] Loaded (Key-gated). Enter valid key to open menu. Settings saved to '"..SETTINGS_FILE.."' if supported.")
