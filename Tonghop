-- FULL SCRIPT (FINAL) - Create Main UI ONLY AFTER key entry, persistent settings
-- Paste into executor / LocalScript. Requires writefile/readfile for persistence (fallback to getgenv).

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer

-- Config
local VALID_KEYS = { abcd = true, abcdf = true, bpremium = true }
local SETTINGS_FILE = "custom_menu_settings.json"

-- Default settings
local defaultSettings = {
    infJump = false,
    noclip = false,
    walkspeedEnabled = false,
    walkspeedValue = 16,
    hitboxAll = false,
    hitboxEnemy = false,
    hitboxSize = 5,
    espAll = false,
    espEnemy = false,
    playerListVisible = false
}

-- Persistence helpers (safe)
local function fileRead(name)
    if type(readfile) == "function" then
        local ok, content = pcall(readfile, name)
        if ok then return content end
        return nil
    else
        return getgenv().__custom_menu_file_data
    end
end
local function fileWrite(name, content)
    if type(writefile) == "function" then
        pcall(writefile, name, content)
    else
        getgenv().__custom_menu_file_data = content
    end
end

-- Load settings
local settings = {}
do
    local raw = fileRead(SETTINGS_FILE)
    if raw then
        local ok, dec = pcall(function() return HttpService:JSONDecode(raw) end)
        if ok and type(dec) == "table" then
            settings = dec
        else
            settings = defaultSettings
        end
    else
        settings = defaultSettings
    end
    -- ensure all keys present
    for k,v in pairs(defaultSettings) do if settings[k] == nil then settings[k] = v end end
    -- write back file to ensure exists
    pcall(function() fileWrite(SETTINGS_FILE, HttpService:JSONEncode(settings)) end)
end

local function saveSettings()
    local ok, encoded = pcall(function() return HttpService:JSONEncode(settings) end)
    if ok and encoded then pcall(fileWrite, SETTINGS_FILE, encoded) end
end
local function setAndSave(k,v) settings[k]=v; saveSettings() end

-- Runtime state (will be set from settings when main UI created)
local infJumpEnabled, noclipEnabled, wsEnabled = false,false,false
local walkspeedValue = 16
local hbAllEnabled, hbEnemyEnabled, hbSizeValue = false,false,5
local espAllEnabled, espEnemyEnabled = false,false
local playerListVisible = false

-- helper isEnemy
local function isEnemy(p)
    if not p then return true end
    if player.Team and p.Team then return player.Team ~= p.Team end
    return true
end

-- store original HRP props for restore
local originalProps = {} -- [UserId] = { Size, Transparency, Material, Color, CanCollide }

local function saveOriginalPropsFor(pl)
    if not pl or not pl.Character then return end
    local hrp = pl.Character:FindFirstChild("HumanoidRootPart")
    if hrp and not originalProps[pl.UserId] then
        originalProps[pl.UserId] = {
            Size = hrp.Size,
            Transparency = hrp.Transparency,
            Material = hrp.Material,
            Color = hrp.Color,
            CanCollide = hrp.CanCollide
        }
    end
end
local function applyHitboxTo(pl,size)
    if not pl or not pl.Character then return end
    local hrp = pl.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    saveOriginalPropsFor(pl)
    pcall(function()
        hrp.Size = Vector3.new(size,size,size)
        hrp.Transparency = 0.7
        hrp.Material = Enum.Material.Neon
        hrp.Color = Color3.fromRGB(0,255,0)
        hrp.CanCollide = false
    end)
end
local function resetHitboxFor(pl)
    if not pl or not pl.Character then return end
    local hrp = pl.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local orig = originalProps[pl.UserId]
    if orig then
        pcall(function()
            hrp.Size = orig.Size
            hrp.Transparency = orig.Transparency or 0
            hrp.Material = orig.Material or Enum.Material.Plastic
            hrp.Color = orig.Color or Color3.fromRGB(163,162,165)
            hrp.CanCollide = orig.CanCollide ~= nil and orig.CanCollide or true
        end)
        originalProps[pl.UserId] = nil
    else
        pcall(function()
            hrp.Size = Vector3.new(2,2,1)
            hrp.Transparency = 0
            hrp.Material = Enum.Material.Plastic
            hrp.Color = Color3.fromRGB(163,162,165)
            hrp.CanCollide = true
        end)
    end
end

local function addHighlightTo(pl, color)
    if not pl or not pl.Character then return end
    local hl = pl.Character:FindFirstChild("ESPHighlight")
    if not hl then
        hl = Instance.new("Highlight")
        hl.Name = "ESPHighlight"
        hl.FillTransparency = 1
        hl.OutlineTransparency = 0
        hl.Parent = pl.Character
    end
    pcall(function() hl.OutlineColor = color end)
end
local function removeHighlightFrom(pl)
    if not pl or not pl.Character then return end
    local hl = pl.Character:FindFirstChild("ESPHighlight")
    if hl then pcall(function() hl:Destroy() end) end
end

-- -------------------------
-- KEY UI (only UI present at startup)
-- -------------------------
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "CustomMenu_KeyOnly"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = player:WaitForChild("PlayerGui")

local keyFrame = Instance.new("Frame", ScreenGui)
keyFrame.Name = "KeyFrame"
keyFrame.Size = UDim2.new(0, 340, 0, 180)
keyFrame.Position = UDim2.new(0.5, -170, 0.5, -90)
keyFrame.BackgroundColor3 = Color3.fromRGB(40,40,40)
keyFrame.BorderSizePixel = 0

local title = Instance.new("TextLabel", keyFrame)
title.Size = UDim2.new(1, -20, 0, 28)
title.Position = UDim2.new(0,10,0,8)
title.BackgroundTransparency = 1
title.Text = "Nhập Key"
title.TextScaled = true
title.TextColor3 = Color3.new(1,1,1)

local keyBox = Instance.new("TextBox", keyFrame)
keyBox.Size = UDim2.new(0, 260, 0, 36)
keyBox.Position = UDim2.new(0.5, -130, 0, 48)
keyBox.PlaceholderText = "Nhập key..."
keyBox.ClearTextOnFocus = false

local keyBtn = Instance.new("TextButton", keyFrame)
keyBtn.Size = UDim2.new(0, 120, 0, 36)
keyBtn.Position = UDim2.new(0.5, -60, 0, 100)
keyBtn.Text = "Xác nhận"
keyBtn.BackgroundColor3 = Color3.fromRGB(70,70,70)
keyBtn.BorderSizePixel = 0

local keyToggleBtn = Instance.new("TextButton", ScreenGui)
keyToggleBtn.Size = UDim2.new(0, 110, 0, 36)
keyToggleBtn.Position = UDim2.new(0, 10, 0, 10)
keyToggleBtn.Text = "Key Menu"
keyToggleBtn.BackgroundColor3 = Color3.fromRGB(60,60,60)
keyToggleBtn.BorderSizePixel = 0
keyToggleBtn.MouseButton1Click:Connect(function() keyFrame.Visible = not keyFrame.Visible end)

-- Main UI will be created only after key validated
local MainGUI = nil

-- Function to build the full Main UI and wire everything (called once after key success)
local function createMainUI()
    if MainGUI then return end

    -- create a new ScreenGui (separate from key UI)
    MainGUI = Instance.new("ScreenGui")
    MainGUI.Name = "CustomMenu_Main"
    MainGUI.ResetOnSpawn = false
    MainGUI.Parent = player:WaitForChild("PlayerGui")

    -- Main toggle (top-right)
    local mainToggleBtn = Instance.new("TextButton", MainGUI)
    mainToggleBtn.Size = UDim2.new(0, 110, 0, 36)
    mainToggleBtn.Position = UDim2.new(1, -130, 0, 10)
    mainToggleBtn.Text = "Main"
    mainToggleBtn.BackgroundColor3 = Color3.fromRGB(60,60,60)
    mainToggleBtn.BorderSizePixel = 0

    -- Main Frame
    local mainFrame = Instance.new("Frame", MainGUI)
    mainFrame.Size = UDim2.new(0, 520, 0, 420)
    mainFrame.Position = UDim2.new(0.5, -260, 0.5, -210)
    mainFrame.BackgroundColor3 = Color3.fromRGB(45,45,45)
    mainFrame.BorderSizePixel = 0
    mainFrame.Visible = true

    mainToggleBtn.MouseButton1Click:Connect(function() mainFrame.Visible = not mainFrame.Visible end)

    -- Tab bar + pages
    local tabBar = Instance.new("Frame", mainFrame)
    tabBar.Size = UDim2.new(1, 0, 0, 44)
    tabBar.Position = UDim2.new(0, 0, 0, 0)
    tabBar.BackgroundColor3 = Color3.fromRGB(35,35,35)
    local pages = {}
    local function makeTab(name, idx)
        local btn = Instance.new("TextButton", tabBar)
        btn.Size = UDim2.new(0, 170, 1, 0)
        btn.Position = UDim2.new(0, (idx-1)*170, 0, 0)
        btn.Text = name
        btn.BackgroundColor3 = Color3.fromRGB(55,55,55)
        btn.BorderSizePixel = 0

        local page = Instance.new("Frame", mainFrame)
        page.Size = UDim2.new(1, 0, 1, -44)
        page.Position = UDim2.new(0, 0, 0, 44)
        page.BackgroundColor3 = Color3.fromRGB(60,60,60)
        page.Visible = false

        btn.MouseButton1Click:Connect(function()
            for _,v in pairs(pages) do v.Visible = false end
            page.Visible = true
        end)
        pages[name] = page
        return page
    end

    local playerPage = makeTab("Player",1)
    local espPage = makeTab("ESP",2)
    local scriptPage = makeTab("Script",3)

    -- Utility to make button
    local function mkBtn(parent, text, y)
        local b = Instance.new("TextButton", parent)
        b.Size = UDim2.new(0, 220, 0, 36)
        b.Position = UDim2.new(0, 12, 0, y)
        b.Text = text
        b.BackgroundColor3 = Color3.fromRGB(70,70,70)
        b.BorderSizePixel = 0
        return b
    end

    -- ---------------- Player tab UI & logic ----------------
    local infBtn = mkBtn(playerPage, "InfJump: OFF", 8)
    local noclipBtn = mkBtn(playerPage, "NoClip: OFF", 56)
    local wsBtn = mkBtn(playerPage, "WalkSpeed: OFF", 104)

    local wsInput = Instance.new("TextBox", playerPage)
    wsInput.Size = UDim2.new(0, 220, 0, 30)
    wsInput.Position = UDim2.new(0, 12, 0, 152)
    wsInput.PlaceholderText = "Nhập tốc độ..."
    wsInput.Text = tostring(walkspeedValue)

    local playerListBtn = mkBtn(playerPage, "Bảng Player: OFF", 200)
    local playerListFrame = Instance.new("Frame", playerPage)
    playerListFrame.Size = UDim2.new(0, 260, 0, 320)
    playerListFrame.Position = UDim2.new(0, 240, 0, 8)
    playerListFrame.BackgroundColor3 = Color3.fromRGB(50,50,50)
    playerListFrame.BorderSizePixel = 0
    playerListFrame.Visible = playerListVisible

    local playerListLayout = Instance.new("UIListLayout", playerListFrame)
    playerListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    playerListLayout.Padding = UDim.new(0,6)

    -- bind playertab events (toggle & save)
    infBtn.MouseButton1Click:Connect(function()
        infJumpEnabled = not infJumpEnabled
        infBtn.Text = infJumpEnabled and "InfJump: ON" or "InfJump: OFF"
        setAndSave("infJump", infJumpEnabled)
    end)

    noclipBtn.MouseButton1Click:Connect(function()
        noclipEnabled = not noclipEnabled
        noclipBtn.Text = noclipEnabled and "NoClip: ON" or "NoClip: OFF"
        setAndSave("noclip", noclipEnabled)
    end)

    wsBtn.MouseButton1Click:Connect(function()
        wsEnabled = not wsEnabled
        wsBtn.Text = wsEnabled and "WalkSpeed: ON" or "WalkSpeed: OFF"
        walkspeedValue = tonumber(wsInput.Text) or walkspeedValue
        setAndSave("walkspeedEnabled", wsEnabled)
        setAndSave("walkspeedValue", walkspeedValue)
    end)

    wsInput.FocusLost:Connect(function(enter)
        local v = tonumber(wsInput.Text)
        if v then
            walkspeedValue = v
            setAndSave("walkspeedValue", walkspeedValue)
            if wsEnabled and player.Character then
                local h = player.Character:FindFirstChildOfClass("Humanoid")
                if h then pcall(function() h.WalkSpeed = walkspeedValue end) end
            end
        else
            wsInput.Text = tostring(walkspeedValue)
        end
    end)

    playerListBtn.MouseButton1Click:Connect(function()
        playerListFrame.Visible = not playerListFrame.Visible
        playerListBtn.Text = "Bảng Player: " .. (playerListFrame.Visible and "ON" or "OFF")
        setAndSave("playerListVisible", playerListFrame.Visible)
    end)

    local function clearPlayerList()
        for _,c in pairs(playerListFrame:GetChildren()) do
            if c:IsA("TextButton") then c:Destroy() end
        end
    end
    local function createPlayerButton(target)
        if not target or target == player then return end
        local btn = Instance.new("TextButton", playerListFrame)
        btn.Size = UDim2.new(1, -12, 0, 28)
        btn.BackgroundColor3 = Color3.fromRGB(70,70,70)
        btn.BorderSizePixel = 0
        btn.Text = target.Name
        btn.LayoutOrder = #playerListFrame:GetChildren() + 1
        btn.MouseButton1Click:Connect(function()
            if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
            if target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                pcall(function()
                    player.Character.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame + Vector3.new(0,3,0)
                end)
            end
        end)
        return btn
    end
    local function updatePlayerList()
        clearPlayerList()
        for _,pl in pairs(Players:GetPlayers()) do
            if pl ~= player then createPlayerButton(pl) end
        end
    end

    -- update live while visible
    RunService.RenderStepped:Connect(function()
        if playerListFrame and playerListFrame.Visible then
            pcall(updatePlayerList)
        end
    end)
    Players.PlayerAdded:Connect(function(pl)
        if playerListFrame.Visible then task.wait(0.2); pcall(updatePlayerList) end
        pl.CharacterAdded:Connect(function() task.wait(0.4); if playerListFrame.Visible then pcall(updatePlayerList) end end)
    end)
    Players.PlayerRemoving:Connect(function(pl) if playerListFrame.Visible then task.wait(0.1); pcall(updatePlayerList) end end)

    -- ---------------- ESP tab UI & logic ----------------
    local hbSizeInput = Instance.new("TextBox", espPage)
    hbSizeInput.Size = UDim2.new(0, 140, 0, 36)
    hbSizeInput.Position = UDim2.new(0, 12, 0, 8)
    hbSizeInput.PlaceholderText = "Hitbox size"
    hbSizeInput.Text = tostring(hbSizeValue)

    local function mkESPBtn(text,y,cb)
        local b = Instance.new("TextButton", espPage)
        b.Size = UDim2.new(0, 220, 0, 36)
        b.Position = UDim2.new(0, 12, 0, y)
        b.Text = text .. ": OFF"
        b.BackgroundColor3 = Color3.fromRGB(70,70,70)
        b.BorderSizePixel = 0
        local state = false
        b.MouseButton1Click:Connect(function()
            state = not state
            b.Text = text .. ": " .. (state and "ON" or "OFF")
            cb(state)
        end)
        return b
    end

    local hbAllBtn = mkESPBtn("Hitbox All", 60, function(s) hbAllEnabled = s setAndSave("hitboxAll", s) end)
    local hbEnemyBtn = mkESPBtn("Hitbox Enemy", 110, function(s) hbEnemyEnabled = s setAndSave("hitboxEnemy", s) end)
    local espAllBtn = mkESPBtn("ESP All", 160, function(s) espAllEnabled = s setAndSave("espAll", s) end)
    local espEnemyBtn = mkESPBtn("ESP Enemy", 210, function(s) espEnemyEnabled = s setAndSave("espEnemy", s) end)

    hbSizeInput.FocusLost:Connect(function()
        local v = tonumber(hbSizeInput.Text)
        if v then hbSizeValue = v setAndSave("hitboxSize", hbSizeValue) else hbSizeInput.Text = tostring(hbSizeValue) end
    end)

    -- Keep track when players join/leave
    Players.PlayerRemoving:Connect(function(pl) if originalProps[pl.UserId] then originalProps[pl.UserId] = nil end end)
    Players.PlayerAdded:Connect(function(pl)
        pl.CharacterAdded:Connect(function()
            task.wait(0.6)
            if hbAllEnabled then applyHitboxTo(pl, hbSizeValue) end
            if hbEnemyEnabled and isEnemy(pl) then applyHitboxTo(pl, hbSizeValue) end
            if espAllEnabled then addHighlightTo(pl, Color3.fromRGB(0,255,0)) end
            if espEnemyEnabled and isEnemy(pl) then addHighlightTo(pl, Color3.fromRGB(255,0,0)) end
        end)
    end)

    -- Updater loop for Hitbox & ESP (runs after main created)
    task.spawn(function()
        while true do
            local size = tonumber(hbSizeInput.Text) or hbSizeValue
            for _,pl in ipairs(Players:GetPlayers()) do
                if pl ~= player then
                    if pl.Character and pl.Character:FindFirstChild("HumanoidRootPart") then
                        -- Hitbox
                        if hbAllEnabled then applyHitboxTo(pl, size)
                        elseif hbEnemyEnabled and isEnemy(pl) then applyHitboxTo(pl, size)
                        else resetHitboxFor(pl) end
                        -- ESP
                        if espAllEnabled then addHighlightTo(pl, Color3.fromRGB(0,255,0))
                        elseif espEnemyEnabled and isEnemy(pl) then addHighlightTo(pl, Color3.fromRGB(255,0,0))
                        else removeHighlightFrom(pl) end
                    end
                end
            end
            task.wait(0.25)
        end
    end)

    -- ---------------- Script tab ----------------
    local function mkScriptBtn(parent, text, y, cb)
        local b = Instance.new("TextButton", parent)
        b.Size = UDim2.new(0, 240, 0, 36)
        b.Position = UDim2.new(0, 12, 0, y)
        b.Text = text
        b.BackgroundColor3 = Color3.fromRGB(70,70,70)
        b.BorderSizePixel = 0
        b.MouseButton1Click:Connect(function() pcall(cb) end)
        return b
    end

    mkScriptBtn(scriptPage, "Load FlyGuiV3", 10, function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
    end)
    mkScriptBtn(scriptPage, "DatTh Script", 60, function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/LuaCrack/DatThg/refs/heads/main/DatThgV2"))()
    end)
    mkScriptBtn(scriptPage, "Mở Menu TP", 110, function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/doanhvu339-ux/Fly/refs/heads/main/scripttp"))()
    end)

    -- ---------------- Apply settings to UI (initial) ----------------
    do
        -- player
        infJumpEnabled = settings.infJump
        infBtn.Text = infJumpEnabled and "InfJump: ON" or "InfJump: OFF"
        noclipEnabled = settings.noclip
        noclipBtn.Text = noclipEnabled and "NoClip: ON" or "NoClip: OFF"
        walkspeedValue = settings.walkspeedValue or walkspeedValue
        wsInput.Text = tostring(walkspeedValue)
        wsEnabled = settings.walkspeedEnabled
        wsBtn.Text = wsEnabled and "WalkSpeed: ON" or "WalkSpeed: OFF"
        playerListVisible = settings.playerListVisible
        playerListFrame.Visible = playerListVisible
        playerListBtn.Text = "Bảng Player: " .. (playerListFrame.Visible and "ON" or "OFF")
        -- esp
        hbSizeValue = settings.hitboxSize or hbSizeValue
        hbSizeInput.Text = tostring(hbSizeValue)
        hbAllEnabled = settings.hitboxAll
        hbEnemyEnabled = settings.hitboxEnemy
        espAllEnabled = settings.espAll
        espEnemyEnabled = settings.espEnemy
        hbAllBtn.Text = "Hitbox All: " .. (hbAllEnabled and "ON" or "OFF")
        hbEnemyBtn.Text = "Hitbox Enemy: " .. (hbEnemyEnabled and "ON" or "OFF")
        espAllBtn.Text = "ESP All: " .. (espAllEnabled and "ON" or "OFF")
        espEnemyBtn.Text = "ESP Enemy: " .. (espEnemyEnabled and "ON" or "OFF")
    end

    -- NoClip & WalkSpeed updater (only active after main created)
    RunService.Stepped:Connect(function()
        if noclipEnabled and player.Character then
            for _,part in pairs(player.Character:GetDescendants()) do
                if part:IsA("BasePart") then pcall(function() part.CanCollide = false end) end
            end
        end
        if wsEnabled and player.Character then
            local h = player.Character:FindFirstChildOfClass("Humanoid")
            if h then pcall(function() h.WalkSpeed = tonumber(wsInput.Text) or walkspeedValue end) end
        end
    end)
end

-- ---------------- key button: validate -> create main UI & apply saved state ----------------
keyBtn.MouseButton1Click:Connect(function()
    local txt = tostring(keyBox.Text or "")
    if VALID_KEYS[txt] then
        -- destroy key-related UI (and keyToggle)
        pcall(function() keyFrame:Destroy() end)
        pcall(function() keyToggleBtn:Destroy() end)
        -- create main UI and start features; Main UI will read 'settings' already loaded earlier
        createMainUI()
        -- apply saved states already done inside createMainUI
    else
        keyBox.Text = "Sai key!"
    end
end)

-- final print
print("[CustomMenu] Key UI ready. Enter valid key to enable menu. Settings persisted to: " .. SETTINGS_FILE)
